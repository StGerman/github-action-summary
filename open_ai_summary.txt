poetry run python3 summary/generate.py diff.txt openai
# Summary of Code Changes

## Problem Statement and Goal
The primary objective of these code changes is to enhance the functionality of the summary generation script by integrating support for the OpenAI API and preparing for future integration with the Gemini API. The changes aim to streamline the process of generating summaries from diff files, allowing users to specify the API provider.

## Use Cases and Scenarios
1. **Summary Generation**: Users can generate summaries from diff files using the OpenAI API by providing the necessary API key.
2. **Future API Integration**: The code is structured to allow easy integration of additional API providers, such as Gemini, without significant refactoring.
3. **Testing**: The changes include unit tests to ensure the summary generation function operates correctly with mocked API responses.

## Requirements and Constraints
- The script requires an OpenAI API key to function.
- The code must handle different API providers, with a fallback for unsupported providers.
- The system prompt for generating summaries must be read from a specified file.
- The implementation must maintain backward compatibility with existing functionality.

## High-Level Overview of Changes Made
1. **New Functionality**:
   - Introduced `openai_summary` function to handle summary generation via the OpenAI API.
   - Added `generate_summary` function that accepts a provider parameter to switch between OpenAI and future API integrations.

2. **File Handling**:
   - The script now reads user input and system prompts from specified files, enhancing flexibility.

3. **Testing Enhancements**:
   - Created a new test for the `generate_summary` function, ensuring it works with a mocked OpenAI API key.

4. **Dependency Updates**:
   - Updated `pyproject.toml` to include the `google-generativeai` library for future use.

5. **Makefile Modifications**:
   - Updated the linting and testing commands to utilize Poetry for consistency in the development environment.

## References and Links
- [OpenAI API Documentation](https://beta.openai.com/docs/)
- [Gemini API Documentation](https://www.example.com/gemini-api) (Placeholder link for future reference)

---

## Appendix

### Open Questions
1. What specific features of the Gemini API should be prioritized for integration?
2. Are there any additional error handling mechanisms required for API failures?
3. Should the system prompt be configurable via command-line arguments or environment variables?

### Action Items
1. Implement the Gemini API integration as outlined in the future plans.
2. Review and finalize the error handling strategy for API interactions.
3. Conduct further testing to ensure robustness against various input scenarios.
